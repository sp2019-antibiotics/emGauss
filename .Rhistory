source('EM_Gauss.R')
setwd("~/JKU/10.Semester/Statistical Projects/Code/WorkspaceProject")
source('EM_Gauss.R')
#
y <- c(2, 4, 5,6,5,2,2, 1, 1, 2,  2, 1,6,7,8,7,6, 5, 2,1)
barplot(y, names.arg = 1:length(y)+5)
em.gauss(y = y,
mu = c(8.36, 17.28),
sigma2 = c(1.67,  8.4),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
y.data <- data.frame(name = 1:length(y)+5, y)
hist(rep(y.data[,1],y.data[,2]),freq = F )
curve(0.34* dnorm(x, mean = 9, sd = sqrt(4.07))+ 0.66* dnorm(x, mean = 20, sd = sqrt(5.98)),
from= 6, to = 25, add = T, ylab = 'density')
class(zd.data)
y <- as.numeric(zd)
# Laod Data
ZD <- read.csv("C:/Users/Michaela/Dropbox/Project SS2019/Implementierung/Daten/ZD.csv", sep=";")
zd <- ZD[3, 4:48]
zd.data <- data.frame(6:50, t(zd) )
barplot(as.matrix(zd))
y <- as.numeric(zd)
y
em.gauss(y = y,
mu = c(20.87, 23.87),
sigma2 = c(0.95, 1.06),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
debug(em.gauss)
em.gauss(y = y,
mu = c(20.87, 23.87),
sigma2 = c(0.95, 1.06),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
undebug(em.gauss)
source("EM_Gauss.R")
em.gauss(y = y,
mu = c(20.87, 23.87),
sigma2 = c(0.95, 1.06),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
optim.loglik.pen(musigma)
musigma
musigma
optim.loglik.pen(musigma)
optim.loglik.pen(musigma, J = J, njk= njk_exp[,k], ab_bin = ab_bin, alpha = alpha, beta = beta)
njk_exp[,k]
ab_bin
Q
source("EM_gauss.R")
y <- as.numeric(zd)
em.gauss(y = y,
mu = c(20.87, 23.87),
sigma2 = c(0.95, 1.06),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
source("EM_gauss.R")
y <- as.numeric(zd)
em.gauss(y = y,
mu = c(20.87, 23.87),
sigma2 = c(0.95, 1.06),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
source("EM_gauss.R")
y <- as.numeric(zd)
em.gauss(y = y,
mu = c(20.87, 23.87),
sigma2 = c(0.95, 1.06),
pi = c(1/2, 1/2),
alpha = 1,
beta = 3,
epsilon = 0.0001)
barplot(y, names.arg = 1:length(y)+5)
y.data <- data.frame(name = 1:length(y)+5, y)
hist(rep(y.data[,1],y.data[,2]),freq = F )
curve(0.10* dnorm(x, mean = 9, sd = sqrt(21))+ 0.9* dnorm(x, mean = 21, sd = sqrt(6.3)),
from= 6, to = 25, add = T, ylab = 'density')
hist(rep(y.data[,1],y.data[,2]),freq = F, breaks = length(y)  )
curve(0.10* dnorm(x, mean = 9, sd = sqrt(21))+ 0.9* dnorm(x, mean = 21, sd = sqrt(6.3)),
from= 6, to = 25, add = T, ylab = 'density')
curve(0.10* dnorm(x, mean = 9, sd = sqrt(21))+ 0.9* dnorm(x, mean = 21, sd = sqrt(6.3)),
from= 6, to = 30, add = T, ylab = 'density')
y.data <- data.frame(name = 1:length(y)+6, y)
hist(rep(y.data[,1],y.data[,2]),freq = F, breaks = length(y)  )
curve(0.10* dnorm(x, mean = 9, sd = sqrt(21))+ 0.9* dnorm(x, mean = 21, sd = sqrt(6.3)),
from= 6, to = 30, add = T, ylab = 'density')
y.data <- data.frame(name = 1:length(y)+5, y)
hist(rep(y.data[,1],y.data[,2]),freq = F, breaks = length(y)  )
curve(0.10* dnorm(x, mean = 9, sd = sqrt(21))+ 0.9* dnorm(x, mean = 21, sd = sqrt(6.3)),
from= 6, to = 30, add = T, ylab = 'density')
zd <- ZD[9, 4:48]
zd.data <- data.frame(6:50, t(zd) )
barplot(as.matrix(zd))
crea
createCluster(as.matrix(zd.data), 2)
library(tidyverse)
createCluster <- function(y,k, method = "quantile"){
#y matrix with columns (name of bin, number of observation)
#k number of groups
# method quantiles and binbased
if(class(y) != "matrix") warning("y is not a matrix")
if(class(k) != "numeric") warning("k is not a numeric vector")
if(any(k<0)) warning("only positiv x values are allowed")
if(any(y<0)) warning("only positiv y values are allowed")
# Delete 0 Observations
y <- y[y[,2] != 0, ]
parameters <- data.frame(mu = c(1:k),sigma2 = c(1:k))
if (method == 'binbased'){
groups <- round(length(y[,1])/k)
y <- data.frame(y)
lowerBound <- 0
upperBound <- groups
# GRUEN: Assign group with rep
# GRUEN: estimates for pi
# GRUEN: Delete 0
for(i in 1:k){
yNew <- y %>% filter(y[,1] <= upperBound & lowerBound < y[,1])
parameters[i,1] <- mean(rep(yNew[,1],yNew[,2]))
parameters[i,2] <- var(rep(yNew[,1],yNew[,2]))
lowerBound <- upperBound
upperBound <- upperBound + groups
}
}
if ( method == "quantile"){
groups <- round(sum(y[,2])/k)
y.splitted <- rep(y[,1],y[,2])
g <- rep(1:k, each= groups)
df <- data.frame(d = y.splitted, group = g[1:length(y.splitted)] )
parameters[,1] <- aggregate(df$d, list(df$group), FUN = 'mean')$x
parameters[,2] <- aggregate(df$d, list(df$group), FUN = 'var')$x
}
return(parameters)
}
zd.data <- data.frame(6:50, t(zd) )
barplot(as.matrix(zd))
crea
createCluster(as.matrix(zd.data), 2)
zd <- ZD[6, 4:48]
zd.data <- data.frame(6:50, t(zd) )
barplot(as.matrix(zd))
zd <- ZD[4, 4:48]
zd.data <- data.frame(6:50, t(zd) )
barplot(as.matrix(zd))
zd <- ZD[4, 4:48]
zd.data <- data.frame(6:50, t(zd) )
barplot(as.matrix(zd))
crea
createCluster(as.matrix(zd.data), 2)
y
zd.data <- data.frame(6:50, t(y) )
barplot(as.matrix(zd))
createCluster(as.matrix(zd.data), 2)
zd.data
zd.data <- data.frame(6:50, y )
barplot(as.matrix(zd))
createCluster(as.matrix(zd.data), 2)
library(tidyverse)
createCluster <- function(y,k, method = "quantile"){
#y matrix with columns (name of bin, number of observation)
#k number of groups
# method quantiles and binbased
if(class(y) != "matrix") warning("y is not a matrix")
if(class(k) != "numeric") warning("k is not a numeric vector")
if(any(k<0)) warning("only positiv x values are allowed")
if(any(y<0)) warning("only positiv y values are allowed")
# Delete 0 Observations
y <- y[-1, ]
y <- y[y[,2] != 0, ]
parameters <- data.frame(mu = c(1:k),sigma2 = c(1:k))
if (method == 'binbased'){
groups <- round(length(y[,1])/k)
y <- data.frame(y)
lowerBound <- 0
upperBound <- groups
# GRUEN: Assign group with rep
# GRUEN: estimates for pi
# GRUEN: Delete 0
for(i in 1:k){
yNew <- y %>% filter(y[,1] <= upperBound & lowerBound < y[,1])
parameters[i,1] <- mean(rep(yNew[,1],yNew[,2]))
parameters[i,2] <- var(rep(yNew[,1],yNew[,2]))
lowerBound <- upperBound
upperBound <- upperBound + groups
}
}
if ( method == "quantile"){
groups <- round(sum(y[,2])/k)
y.splitted <- rep(y[,1],y[,2])
g <- rep(1:k, each= groups)
df <- data.frame(d = y.splitted, group = g[1:length(y.splitted)] )
parameters[,1] <- aggregate(df$d, list(df$group), FUN = 'mean')$x
parameters[,2] <- aggregate(df$d, list(df$group), FUN = 'var')$x
}
return(parameters)
}
createCluster(as.matrix(zd.data), 2)
zd.data
createCluster(as.matrix(zd.data), 2)
install.packages('Rtools')
library(invgamma)
install.packages('invgamma')
install.packages('tidyverse')
Sys.getenv('PATH')
devtools::find_rtools()
install.packages('devtools')
devtools::find_rtools()
install.packages('invgamma')
library(invgamma)
usethis::use_package('invgamma')
usethis::use_package('tidyverse')
usethis::use_package('dplyr')
usethis::use_package('tidyverse')
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
devtools::document(roclets = c('rd', 'collate', 'namespace'))
install.packages("roxygen2")
install.packages("roxygen2")
